{
  "hash": "b6612281856572ffcbba44f5f2e5020a",
  "result": {
    "markdown": "---\ntitle: \"Using Xbox Controllers and Sending EEG Triggers with E-Prime\"\nauthor: \"Matthew J. Kmiecik\"\ndate: \"12 June 2017\"\ndescription: \"A how-to article for EEG enthusiasts.\"\ncategories:\n  - Academic\n  - E-Prime\n  - EEG\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    toc-location: left\n    smooth-scroll: true\n---\n\n\n\n\n<br >\n\n# Introduction\n\nI just spent an entire week wrangling the E-Prime beast and I've lived to tell the tale. I was able to successfully integrate an Xbox controller to accept participant responses as well as communicate these to an EEG system as triggers. This wouldn't have been possible without the help of benevolent bloggers and discussions on E-Prime's Google group, so thank you all! I'll point out these information sources along the way.\n\nI've programmed a simple experiment that checks the passing of triggers to a local EEG system that is available for download on [this website's github repo/data/](https://github.com/mkmiecik14/mkmiecik14.github.io/tree/master/data). Click [here](mkmiecik14.github.io/data/triggerTutorialExperiment.es2) to download the experiment file titled **triggerTutorialExperiment.es2**.\n\nMy general software/hardware specifications:\n\n1. E-Prime 2.0 Standard (2.0.10.356)\n2. PC: Windows 8.1 Pro (2GB RAM, 32-bit OS)\n3. EEG: ANT neuro [eego mylab](https://www.ant-neuro.com/products/eego-mylab) EEG amplifier\n\n# Xbox Controller with E-Prime\n\n1) Plug the Xbox controller into a USB drive on the same computer that will be running your E-prime experiment. If this is the first time plugging it in, allow Windows to install the necessary drivers. \n\n2) Download a program that will allow you to map the buttons on the Xbox controller to keyboard keystrokes. I recommend the program [JoyToKey](http://joytokey.net/en/). Once downloaded, open JoyToKey with the Xbox controller still plugged in and modify or create a new profile. In the right pane, click on the button that you would like to assign a keyboard keystroke to and then click \"Edit button assignment\". If you are unsure which controller buttons correspond to the numberic buttons (e.g., Button 1), then type \"joy.cpl\" into the Windows search bar (see [here](https://www.howtogeek.com/241421/how-to-calibrate-your-gaming-controller-in-windows-10/)) and then click \"Properties\". The buttons on this window will light up when pressed, indicating the numneric button assignments.\n\n![*I am pressing the A button in this screenshot.*](../../images/joy2key1.png)\n\n3) Assign the necessary buttons to specific keystrokes in JoyToKey by clicking the \"Edit button assignment\" and then simply pressing the intended keystroke on the keyboard. Click OK to save the assignment. For this experiment, I assigned A (Button 1) to Numpad1 and B (Button 2) to Numpad2.\n\n![*Assigning numberpad #1 to the A button.*](../../images/joy2key2.png)\n\n4) To get E-Prime to recognize controller button presses requires adding a Joystick device. To do this, double click on Experiment (filename.es2) or Edit > Experiment. Click on Devices > Add... > select Joystick. Double click on Joystick in the Devices tab to edit its properties to Emulate Device: Keyboard. See [here](https://support.pstnet.com/hc/en-us/articles/229355467-NEW-FEATURE-Joystick-Device-17152-) for documentation and sample inline code for joystick functions.\n\n![*Joystick configuration in E-prime.*](../../images/eprimeJoystick.png)\n\nE-Prime will now recognize the button presses on the controller as keystrokes. This allows experiments to be programmed as usual, as long as the controller buttons are mapped to appropriate keystrokes (thank you [Ben](https://groups.google.com/forum/#!topic/e-prime/-Kdb0qG83-0) for the idea). You can even emulate the controller as a mouse (see [here](https://www.pstnet.com/support/kb.asp?TopicID=1249)). To do this, edit the joystick properties (see step 4 above) to \"Show Cursor: yes: and include the following inline code at the beginning of your experiment:\n\n```vbscript\nJoystick.AttachToMouseCursor = True\n```\n\n# EEG Triggers\n\nIt is crucial for those studying event-related potentials (ERPs) that the stimulus computer communicates time-locked onsets and responses from E-prime to the EEG recording. There are several ways this can occur, but the one I will be demonstrating is using a parallel port communication from the E-prime stimulus computer to the amplifier (*Note:* this will differ from system to system). Triggers are then embedded into the recorded EEG signal and read into the recording software as events. Let's use a simple experiment to demonstrate sending triggers for the appearance of stimulus events, as well as participant responses. The experiment is available for download [here](mkmiecik14.github.io/data/triggerTutorialExperiment.es2).\n\nIn this experiment participants are presented with a fixation cross and then prompted to press either \"1\" or \"2\". Participants receive feedback regarding the accuracy and reaction time of their response across 10 trials. Here is an image of the experiment structure:\n\n![*E-Prime experiment structure.*](../../images/expStructure.png)\n\nSeveral methods of passing triggers will be demonstrated, including global variables, List Attributes, onset/offset signaling, and WritePort commands.\n\n## Determining the parallel port\n\nPST provides very good instructions for determining the port address that will be used to pass your triggers that depend on your requirements (see [here](https://www.pstnet.com/eprimelegFAQ.cfm#12)). I'll briefly demonstrate with the parallel port on my PC.\n\nNavigate to your PCs Control Panel > Hardware and Sound > Device Manager > Ports (COM & LPT) > Printer Port (LPT) > right click and select Properties > Resources tab. The address on my computer is 0378, and that translates to &H378. I will use this parallel port address in E-Prime to send triggers to the EEG computer.\n\n## Onset/Offset signaling\n\nThis type of signaling is the most appropriate to trigger the onset of an event (e.g., fixation cross or stimulus). I'll demonstrate these using the Onset/Offset inline codes mixed with List Attributes. First, let's take a look at \"triggerList\":\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-responsive\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> ID </th>\n   <th style=\"text-align:left;\"> Nested </th>\n   <th style=\"text-align:left;\"> Procedure </th>\n   <th style=\"text-align:right;\"> Press </th>\n   <th style=\"text-align:right;\"> stimTrig </th>\n   <th style=\"text-align:right;\"> fixationTrig </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:left;\">  </td>\n   <td style=\"text-align:left;\"> triggerProc </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nIn this experiment, 9 will denote the onset of a fixation cross (fixationTrig), 11 will denote the onset of the \"Press 1\" condition stimulus, and 22 will denote the onset of the \"Press 2\" condition stimulus. Accuracy will be determined via the \"Press\" column.\n\nThe basic concept is that a trigger will be passed at the onset of a stimulus, but must be reset to zero to toggle between triggers.\n\nTo pass the fixation crosss trigger (9), the following inline code should be placed before the fixation cross TextDisplay (in this example \"fixTrigs\"):\n\n```vbs\n' Triggers for fixation onset\nfixation.OnsetSignalEnabled = True\nfixation.OnsetSignalPort = &H378\nfixation.OnsetSignalData = c.GetAttrib(\"fixationTrig\")\n\n' Triggers for fixation offset\nfixation.OffsetSignalEnabled = True\nfixation.OffsetSignalPort = &H378\nfixation.OffsetSignalData = 0\n```\n\nTo pass the triggers conditional on the correct stimulus comdition (11 or 22), the following inline code should be placed before the stimulus (in this example \"stimTrigs\"):\n\n```vbscript\n' Triggers for stim onset\nstim.OnsetSignalEnabled = True\nstim.OnsetSignalPort = &H378\nstim.OnsetSignalData = c.GetAttrib(\"stimTrig\")\n\n' Triggers for stim offset\nstim.OffsetSignalEnabled = True\nstim.OffsetSignalPort = &H378\nstim.OffsetSignalData = 0\n```\n\n## Using WritePort\n\nPassing triggers for participant responses conditional on their accuracy is a little tricky. In other words, I want to pass a trigger, say with a value of \"1\", if the participant gets the trial correct, and \"2\" if he or she answers incorrectly. Additionally, I do not want the response to terminate the trial due to potential EEG artifacts from the screen changing so close to the response. \n\nThanks go to David McFarlane for a solution to this issue (see [here](https://groups.google.com/forum/#!topic/e-prime/z8PQMH1cf70)). To satisfy the above needs of my experiment, I need to set the following properties of my stim TextDisplay:\n\n* Duration: 3000ms (I'm limiting participants to 3 seconds)\n* Input Device: Keyboard\n* PreRelease: (same as duration) -- this is very important (see [here](https://groups.google.com/forum/#!topic/e-prime/z8PQMH1cf70))\n* Correct: [Press] -- will automatically determine accuracy\n* Time Limit: (same as duration)\n* End Action: (none) -- this will not terminate the stimulus\n\n![*stim TextDisplay configuration.*](../../images/stim.png)\n\nThe basic concept for this is that as soon as \"stim\" is presented on screen, we must program E-Prime to constantly look for a response. If one is detected, send triggers as soon as possible given the trial accuracy (i.e., 1 = correct, 2 = incorrect).\n\nTo do this I slightly modified David McFarlane's script and placed it as an inline code following stim called \"respTrigs\":\n\n```vbs\nDo While stim.InputMasks.IsPending()\n  Sleep 2 ' Will check every 2ms\nLoop\n\nIf Len(stim.RESP) > 0 Then\n  \n  If stim.Acc = 1 Then\n  \n    Debug.Print \"Got it right!\"\n    WritePort &H378, cor ' Signals correct\n  \n  Else\n    \n    Debug.Print \"Got it wrong!\"\n    WritePort &H378, icor ' Signals incorrect\n    \n  End If\n  \nElse\n\n  Debug.Print \"No Response!\"\n  WritePort &H378, nrp ' Signals no response\n  \nEnd If\n\nSleep 10 'Takes a break before resetting port\n\n' Reserts port\nWritePort &H378, 0\n```\n\nAlternatively, if there are no events that require triggers following \"stim\", \"Sleep 10\" could be removed and \"WritePort &H378, 0\" could be placed as the first line of code in the \"fixTrigs\" inline code.\n\nThe variables cor, icor, and nrp were set as [global variables](https://www.pstnet.com/support/kb.asp?TopicID=3844) to be easily modified and stay consitent across the experiment:\n\n```vbs\nDim cor   As Integer\nDim icor  As Integer\nDim nrp   As Integer\n```\n\nAnd then defined at the beginning of the experiment in the inline code \"defTrigs\":\n\n```vbs\ncor   = 1\nicor  = 2\nnrp   = 3\n```\n\n# Timing Considerations\n\nAs a disclaimer, I have not had the chance to test the timing of the triggers and responses from the Xbox controller. This was my first time programming the use of a game controller as well as triggers using the InputMasks.IsPending() method.\n\nPlease comment or shoot me an email (mkmiecik14@gmail.com) if you have any input regarding the approaches outlined above, especially in regards to timing accuracy tests.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}