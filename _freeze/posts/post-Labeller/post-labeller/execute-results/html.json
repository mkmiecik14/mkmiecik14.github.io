{
  "hash": "50851c68f596b0fe7d695c30b68bb002",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Labeling facets in ggplot2\"\nauthor: \"Matthew J. Kmiecik\"\ndate: \"20 May 2025\"\ndescription: \"Who knew such a small setting could make such a big improvement\"\ncategories:\n  - ChatGPT\n  - ggplot2\n  - data viz\nexecute:\n  warning: false\n  message: false\n---\n\n\n\nIn a [previous post](https://mattkmiecik.substack.com/p/named-vectors-in-r), I wrote about how using ChatGPT for R suggestions has taught me some really cool tips and tricks. \n\nHere's another post about one of these cool tips that I recently learned; one that I probably should have known long before the advent of ChatGPT! That is, using the `labeller = ...` argument in `ggplot2`'s facet functions: `facet_wrap()` and `facet_grid()`.\n\nLet's get started with an example use case and see how this simple argument will help others (and yourself) with interpreting facetted figures.\n\nLet's start off with a basic plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata(iris)\n\n# plot constants\ncols <- palette.colors()\ntc <- c(setosa = cols[9], versicolor = cols[2], virginica = cols[3])\npj <- position_jitter(width = .1, height = .1)\n\n# plot\np <- \n  ggplot(iris, aes(Petal.Width, Sepal.Width, color = Species, fill = Species)) +\n  geom_point(alpha = 1/3, shape = 19, position = pj) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  scale_color_manual(values = tc) +\n  scale_fill_manual(values = tc) +\n  theme_bw()\np\n```\n\n::: {.cell-output-display}\n![](post-labeller_files/figure-html/fig1-1.png){width=672}\n:::\n:::\n\n\n\nLet's say we wanted to break out each species into a separate panel. We can do this using `facet_wrap()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + facet_wrap(~Species, scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](post-labeller_files/figure-html/fig2-1.png){width=672}\n:::\n:::\n\n\n\n`facet_wrap()` nicely labels the facets with the values of the variable. Now this is a great default setting, but when sharing this figure with an audience unfamiliar with the data, they could be left wondering what setosa, versicolor, and virginica are, especially if the redundant legend is removed. Also, data are sometimes not clearly labelled when it comes to categorical variables (e.g., 0, 1).\n\nTo make the labeling explicit in the facets, we can using the `labeller` argument and set this to `label_both`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + facet_wrap(~Species, scales = \"free_x\", labeller = label_both)\n```\n\n::: {.cell-output-display}\n![](post-labeller_files/figure-html/fig3-1.png){width=672}\n:::\n:::\n\n\n\nNow \"Species: \" appears before each facet label, clearly indicating that these values indicate different species.\n\nLet's go through a different use case where the values are less clear.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars)\np <- \n  ggplot(mtcars, aes(mpg, hp)) +\n  geom_point(shape = 19, alpha = 1/2) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  theme_bw() + \n  facet_grid(vs~am, scales = \"free\")\np\n```\n\n::: {.cell-output-display}\n![](post-labeller_files/figure-html/fig4-1.png){width=672}\n:::\n:::\n\n\n\nHere we are plotting the relationship between horsepower (hp) and miles per gallon (mpg) in a dataset of cars. I've used `facet_grid()` to further examine this relationship in the 2x2 factorial representation of \"vs\" and \"am\":\n\n```\nvs\tEngine (0 = V-shaped, 1 = straight)\nam\tTransmission (0 = automatic, 1 = manual)\n```\n\nHowever, from the default settings of `facet_wrap()` and `facet_grid()` we cannot easily discern this. This is where the `labeller = ...` argument comes in handy. Let's set `facet_grid(..., labeller = label_both)`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np + facet_grid(vs~am, scales = \"free\", labeller = label_both)\n```\n\n::: {.cell-output-display}\n![](post-labeller_files/figure-html/fig5-1.png){width=672}\n:::\n:::\n\n\n\nNow we can clearly see that the transmission information (am) is represented by the columns while the engine information (vs) is present on the rows. \n\nThis small setting in `ggplot2`'s `facet_*()` functions can make all the difference when quickly plotting data, especially when using `facet_grid()` where the values of each factor are not clearly discernable.\n\n## A quick note about data viz\n\nIn these examples, I used the `scales = \"free\"` and `scales = \"free_x\"` arguments inside my `facet_*()` functions. This allows the axes to vary, which may distort the relationships when comparing across the facets. I did this mainly for illustrative purposes and would not necessarily recommend when interpreting real data. Exercise caution when freeing your scales!\n\n## Summary\n\nWhen plotting faceted data using `ggplot2`, use `labeller = label_both` to increase readability of your facets, especially when the factors are not clearly labeled. Thanks ChatGPT for the tip!\n\n<br >\n\n<div style=\"text-align: center;\">\n  <iframe src=\"https://mattkmiecik.substack.com/embed\" width=\"480\" height=\"320\" style=\"border:1px solid #EEE; background:white;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n</div>",
    "supporting": [
      "post-labeller_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}